/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/api7/ingress-controller/pkg/kube/apisix/apis/config/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApisixServiceLister helps list ApisixServices.
// All objects returned here must be treated as read-only.
type ApisixServiceLister interface {
	// List lists all ApisixServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApisixService, err error)
	// ApisixServices returns an object that can list and get ApisixServices.
	ApisixServices(namespace string) ApisixServiceNamespaceLister
	ApisixServiceListerExpansion
}

// apisixServiceLister implements the ApisixServiceLister interface.
type apisixServiceLister struct {
	indexer cache.Indexer
}

// NewApisixServiceLister returns a new ApisixServiceLister.
func NewApisixServiceLister(indexer cache.Indexer) ApisixServiceLister {
	return &apisixServiceLister{indexer: indexer}
}

// List lists all ApisixServices in the indexer.
func (s *apisixServiceLister) List(selector labels.Selector) (ret []*v1.ApisixService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApisixService))
	})
	return ret, err
}

// ApisixServices returns an object that can list and get ApisixServices.
func (s *apisixServiceLister) ApisixServices(namespace string) ApisixServiceNamespaceLister {
	return apisixServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApisixServiceNamespaceLister helps list and get ApisixServices.
// All objects returned here must be treated as read-only.
type ApisixServiceNamespaceLister interface {
	// List lists all ApisixServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApisixService, err error)
	// Get retrieves the ApisixService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApisixService, error)
	ApisixServiceNamespaceListerExpansion
}

// apisixServiceNamespaceLister implements the ApisixServiceNamespaceLister
// interface.
type apisixServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApisixServices in the indexer for a given namespace.
func (s apisixServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.ApisixService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApisixService))
	})
	return ret, err
}

// Get retrieves the ApisixService from the indexer for a given namespace and name.
func (s apisixServiceNamespaceLister) Get(name string) (*v1.ApisixService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apisixservice"), name)
	}
	return obj.(*v1.ApisixService), nil
}
