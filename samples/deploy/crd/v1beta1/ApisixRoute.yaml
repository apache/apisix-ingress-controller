#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: apisixroutes.apisix.apache.org
spec:
  group: apisix.apache.org
  scope: Namespaced
  names:
    plural: apisixroutes
    singular: apisixroute
    kind: ApisixRoute
    shortNames:
      - ar
  versions:
    - name: v2beta2
      served: true
      storage: false
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .spec.http[].match.hosts
          name: Hosts
          type: string
          priority: 0
        - jsonPath: .spec.http[].match.paths
          name: URIs
          type: string
          priority: 0
        - jsonPath: .spec.http[].backends[].serviceName
          name: Target Service(HTTP)
          type: string
          priority: 1
        - jsonPath: .spec.tcp[].match.ingressPort
          name: Ingress Server Port(TCP)
          type: integer
          priority: 1
        - jsonPath: .spec.tcp[].match.backend.serviceName
          name: Target Service(TCP)
          type: string
          priority: 1
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
          priority: 0
      schema:
        openAPIV3Schema:
          description: ApisixRoute is used to define the route rules and upstreams for Apache APISIX.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApisixRouteSpec is the spec definition for ApisixRouteSpec.
              type: object
              properties:
                http:
                  type: array
                  items:
                    description: ApisixRouteHTTP represents a single route in for HTTP traffic.
                    type: object
                    required:
                      - name
                      - websocket
                    properties:
                      authentication:
                        description: ApisixRouteAuthentication is the authentication-related configuration in ApisixRoute.
                        type: object
                        required:
                          - enable
                          - type
                        properties:
                          enable:
                            type: boolean
                          keyAuth:
                            description: ApisixRouteAuthenticationKeyAuth is the keyAuth-related configuration in ApisixRouteAuthentication.
                            type: object
                            properties:
                              header:
                                type: string
                          type:
                            type: string
                      backends:
                        description: Backends represents potential backends to proxy after the route rule matched. When number of backends are more than one, traffic-split plugin in APISIX will be used to split traffic based on the backend weight.
                        type: array
                        items:
                          description: ApisixRouteHTTPBackend represents an HTTP backend (a Kubernetes Service).
                          type: object
                          required:
                            - serviceName
                            - servicePort
                            - weight
                          properties:
                            resolveGranularity:
                              description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                              type: string
                            serviceName:
                              description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                              type: string
                            servicePort:
                              description: The service port, could be the name or the port number.
                              anyOf:
                                - type: integer
                                - type: string
                              x-kubernetes-int-or-string: true
                            subset:
                              description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                              type: string
                            weight:
                              description: Weight of this backend.
                              type: integer
                      match:
                        description: ApisixRouteHTTPMatch represents the match condition for hitting this route.
                        type: object
                        required:
                          - paths
                        properties:
                          exprs:
                            description: 'NginxVars represents generic match predicates, it uses Nginx variable systems, so any predicate like headers, querystring and etc can be leveraged here to match the route. For instance, it can be: nginxVars:   - subject: "$remote_addr"     op: in     value:       - "127.0.0.1"       - "10.0.5.11"'
                            type: array
                            items:
                              description: ApisixRouteHTTPMatchExpr represents a binary route match expression .
                              type: object
                              required:
                                - op
                                - set
                                - subject
                                - value
                              properties:
                                op:
                                  description: Op is the operator.
                                  type: string
                                set:
                                  description: Set is an array type object of the expression. It should be used when the Op is "in" or "not_in";
                                  type: array
                                  items:
                                    type: string
                                subject:
                                  description: Subject is the expression subject, it can be any string composed by literals and nginx vars.
                                  type: object
                                  required:
                                    - name
                                    - scope
                                  properties:
                                    name:
                                      description: The name of subject.
                                      type: string
                                    scope:
                                      description: 'The subject scope, can be: ScopeQuery, ScopeHeader, ScopePath when subject is ScopePath, Name field will be ignored.'
                                      type: string
                                value:
                                  description: Value is the normal type object for the expression, it should be used when the Op is not "in" and "not_in". Set and Value are exclusive so only of them can be set in the same time.
                                  type: string
                          hosts:
                            description: HTTP Host predicates, host can be a wildcard domain or an exact domain. For wildcard domain, only one generic level is allowed, for instance, "*.foo.com" is valid but "*.*.foo.com" is not.
                            type: array
                            items:
                              type: string
                          methods:
                            description: HTTP request method predicates.
                            type: array
                            items:
                              type: string
                          paths:
                            description: URI path predicates, at least one path should be configured, path could be exact or prefix, for prefix path, append "*" after it, for instance, "/foo*".
                            type: array
                            items:
                              type: string
                          remoteAddrs:
                            description: Remote address predicates, items can be valid IPv4 address or IPv6 address or CIDR.
                            type: array
                            items:
                              type: string
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      plugins:
                        type: array
                        items:
                          description: ApisixRouteHTTPPlugin represents an APISIX plugin.
                          type: object
                          required:
                            - config
                            - enable
                            - name
                          properties:
                            config:
                              description: Plugin configuration.
                            enable:
                              description: Whether this plugin is in use, default is true.
                              type: boolean
                            name:
                              description: The plugin name.
                              type: string
                      priority:
                        description: Route priority, when multiple routes contains same URI path (for path matching), route with higher priority will take effect.
                        type: integer
                      timeout:
                        description: UpstreamTimeout is settings for the read, send and connect to the upstream.
                        type: object
                        properties:
                          connect:
                            type: string
                          read:
                            type: string
                          send:
                            type: string
                      websocket:
                        type: boolean
                stream:
                  type: array
                  items:
                    description: ApisixRouteStream is the configuration for level 4 route
                    type: object
                    required:
                      - backend
                      - match
                      - name
                      - protocol
                    properties:
                      backend:
                        description: ApisixRouteStreamBackend represents a TCP backend (a Kubernetes Service).
                        type: object
                        required:
                          - serviceName
                          - servicePort
                        properties:
                          resolveGranularity:
                            description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                            type: string
                          serviceName:
                            description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                            type: string
                          servicePort:
                            description: The service port, could be the name or the port number.
                            anyOf:
                              - type: integer
                              - type: string
                            x-kubernetes-int-or-string: true
                          subset:
                            description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                            type: string
                      match:
                        description: ApisixRouteStreamMatch represents the match conditions of stream route.
                        type: object
                        required:
                          - ingressPort
                        properties:
                          ingressPort:
                            description: IngressPort represents the port listening on the Ingress proxy server. It should be pre-defined as APISIX doesn't support dynamic listening.
                            type: integer
                            format: int32
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      protocol:
                        type: string
            status:
              description: ApisixStatus is the status report for Apisix ingress Resources
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
    - name: v2beta3
      served: true
      storage: false
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .spec.http[].match.hosts
          name: Hosts
          type: string
          priority: 0
        - jsonPath: .spec.http[].match.paths
          name: URIs
          type: string
          priority: 0
        - jsonPath: .spec.http[].backends[].serviceName
          name: Target Service(HTTP)
          type: string
          priority: 1
        - jsonPath: .spec.tcp[].match.ingressPort
          name: Ingress Server Port(TCP)
          type: integer
          priority: 1
        - jsonPath: .spec.tcp[].match.backend.serviceName
          name: Target Service(TCP)
          type: string
          priority: 1
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
          priority: 0
      schema:
        openAPIV3Schema:
          description: ApisixRoute is used to define the route rules and upstreams for Apache APISIX.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApisixRouteSpec is the spec definition for ApisixRouteSpec.
              type: object
              properties:
                http:
                  type: array
                  items:
                    description: ApisixRouteHTTP represents a single route in for HTTP traffic.
                    type: object
                    required:
                      - name
                      - websocket
                    properties:
                      authentication:
                        description: ApisixRouteAuthentication is the authentication-related configuration in ApisixRoute.
                        type: object
                        required:
                          - enable
                          - type
                        properties:
                          enable:
                            type: boolean
                          jwtAuth:
                            description: ApisixRouteAuthenticationJwtAuth is the jwtAuth-related configuration in ApisixRouteAuthentication.
                            type: object
                            properties:
                              cookie:
                                type: string
                              header:
                                type: string
                              query:
                                type: string
                          keyAuth:
                            description: ApisixRouteAuthenticationKeyAuth is the keyAuth-related configuration in ApisixRouteAuthentication.
                            type: object
                            properties:
                              header:
                                type: string
                          type:
                            type: string
                      backends:
                        description: Backends represents potential backends to proxy after the route rule matched. When number of backends are more than one, traffic-split plugin in APISIX will be used to split traffic based on the backend weight.
                        type: array
                        items:
                          description: ApisixRouteHTTPBackend represents an HTTP backend (a Kubernetes Service).
                          type: object
                          required:
                            - serviceName
                            - servicePort
                            - weight
                          properties:
                            resolveGranularity:
                              description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                              type: string
                            serviceName:
                              description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                              type: string
                            servicePort:
                              description: The service port, could be the name or the port number.
                              anyOf:
                                - type: integer
                                - type: string
                              x-kubernetes-int-or-string: true
                            subset:
                              description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                              type: string
                            weight:
                              description: Weight of this backend.
                              type: integer
                      match:
                        description: ApisixRouteHTTPMatch represents the match condition for hitting this route.
                        type: object
                        required:
                          - paths
                        properties:
                          exprs:
                            description: 'NginxVars represents generic match predicates, it uses Nginx variable systems, so any predicate like headers, querystring and etc can be leveraged here to match the route. For instance, it can be: nginxVars:   - subject: "$remote_addr"     op: in     value:       - "127.0.0.1"       - "10.0.5.11"'
                            type: array
                            items:
                              description: ApisixRouteHTTPMatchExpr represents a binary route match expression .
                              type: object
                              required:
                                - op
                                - set
                                - subject
                                - value
                              properties:
                                op:
                                  description: Op is the operator.
                                  type: string
                                set:
                                  description: Set is an array type object of the expression. It should be used when the Op is "in" or "not_in";
                                  type: array
                                  items:
                                    type: string
                                subject:
                                  description: Subject is the expression subject, it can be any string composed by literals and nginx vars.
                                  type: object
                                  required:
                                    - name
                                    - scope
                                  properties:
                                    name:
                                      description: The name of subject.
                                      type: string
                                    scope:
                                      description: 'The subject scope, can be: ScopeQuery, ScopeHeader, ScopePath when subject is ScopePath, Name field will be ignored.'
                                      type: string
                                value:
                                  description: Value is the normal type object for the expression, it should be used when the Op is not "in" and "not_in". Set and Value are exclusive so only of them can be set in the same time.
                                  type: string
                          hosts:
                            description: HTTP Host predicates, host can be a wildcard domain or an exact domain. For wildcard domain, only one generic level is allowed, for instance, "*.foo.com" is valid but "*.*.foo.com" is not.
                            type: array
                            items:
                              type: string
                          methods:
                            description: HTTP request method predicates.
                            type: array
                            items:
                              type: string
                          paths:
                            description: URI path predicates, at least one path should be configured, path could be exact or prefix, for prefix path, append "*" after it, for instance, "/foo*".
                            type: array
                            items:
                              type: string
                          remoteAddrs:
                            description: Remote address predicates, items can be valid IPv4 address or IPv6 address or CIDR.
                            type: array
                            items:
                              type: string
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      plugin_config_name:
                        type: string
                      plugins:
                        type: array
                        items:
                          description: ApisixRouteHTTPPlugin represents an APISIX plugin.
                          type: object
                          required:
                            - config
                            - enable
                            - name
                          properties:
                            config:
                              description: Plugin configuration.
                            enable:
                              description: Whether this plugin is in use, default is true.
                              type: boolean
                            name:
                              description: The plugin name.
                              type: string
                      priority:
                        description: Route priority, when multiple routes contains same URI path (for path matching), route with higher priority will take effect.
                        type: integer
                      timeout:
                        description: UpstreamTimeout is settings for the read, send and connect to the upstream.
                        type: object
                        properties:
                          connect:
                            type: string
                          read:
                            type: string
                          send:
                            type: string
                      websocket:
                        type: boolean
                stream:
                  type: array
                  items:
                    description: ApisixRouteStream is the configuration for level 4 route
                    type: object
                    required:
                      - backend
                      - match
                      - name
                      - protocol
                    properties:
                      backend:
                        description: ApisixRouteStreamBackend represents a TCP backend (a Kubernetes Service).
                        type: object
                        required:
                          - serviceName
                          - servicePort
                        properties:
                          resolveGranularity:
                            description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                            type: string
                          serviceName:
                            description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                            type: string
                          servicePort:
                            description: The service port, could be the name or the port number.
                            anyOf:
                              - type: integer
                              - type: string
                            x-kubernetes-int-or-string: true
                          subset:
                            description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                            type: string
                      match:
                        description: ApisixRouteStreamMatch represents the match conditions of stream route.
                        type: object
                        required:
                          - ingressPort
                        properties:
                          ingressPort:
                            description: IngressPort represents the port listening on the Ingress proxy server. It should be pre-defined as APISIX doesn't support dynamic listening.
                            type: integer
                            format: int32
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      protocol:
                        type: string
            status:
              description: ApisixStatus is the status report for Apisix ingress Resources
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
    - name: v2
      served: true
      storage: true
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .spec.http[].match.hosts
          name: Hosts
          type: string
          priority: 0
        - jsonPath: .spec.http[].match.paths
          name: URIs
          type: string
          priority: 0
        - jsonPath: .spec.http[].backends[].serviceName
          name: Target Service(HTTP)
          type: string
          priority: 1
        - jsonPath: .spec.tcp[].match.ingressPort
          name: Ingress Server Port(TCP)
          type: integer
          priority: 1
        - jsonPath: .spec.tcp[].match.backend.serviceName
          name: Target Service(TCP)
          type: string
          priority: 1
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
          priority: 0
      schema:
        openAPIV3Schema:
          description: ApisixRoute is used to define the route rules and upstreams for Apache APISIX.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApisixRouteSpec is the spec definition for ApisixRouteSpec.
              type: object
              properties:
                http:
                  type: array
                  items:
                    description: ApisixRouteHTTP represents a single route in for HTTP traffic.
                    type: object
                    required:
                      - name
                      - websocket
                    properties:
                      authentication:
                        description: ApisixRouteAuthentication is the authentication-related configuration in ApisixRoute.
                        type: object
                        required:
                          - enable
                          - type
                        properties:
                          enable:
                            type: boolean
                          jwtAuth:
                            description: ApisixRouteAuthenticationJwtAuth is the jwt auth related configuration in ApisixRouteAuthentication.
                            type: object
                            properties:
                              cookie:
                                type: string
                              header:
                                type: string
                              query:
                                type: string
                          keyAuth:
                            description: ApisixRouteAuthenticationKeyAuth is the keyAuth-related configuration in ApisixRouteAuthentication.
                            type: object
                            properties:
                              header:
                                type: string
                          type:
                            type: string
                      backends:
                        description: Backends represents potential backends to proxy after the route rule matched. When number of backends are more than one, traffic-split plugin in APISIX will be used to split traffic based on the backend weight.
                        type: array
                        items:
                          description: ApisixRouteHTTPBackend represents an HTTP backend (a Kubernetes Service).
                          type: object
                          required:
                            - serviceName
                            - servicePort
                            - weight
                          properties:
                            resolveGranularity:
                              description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                              type: string
                            serviceName:
                              description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                              type: string
                            servicePort:
                              description: The service port, could be the name or the port number.
                              anyOf:
                                - type: integer
                                - type: string
                              x-kubernetes-int-or-string: true
                            subset:
                              description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                              type: string
                            weight:
                              description: Weight of this backend.
                              type: integer
                      match:
                        description: ApisixRouteHTTPMatch represents the match condition for hitting this route.
                        type: object
                        required:
                          - paths
                        properties:
                          exprs:
                            description: 'NginxVars represents generic match predicates, it uses Nginx variable systems, so any predicate like headers, querystring and etc can be leveraged here to match the route. For instance, it can be: nginxVars:   - subject: "$remote_addr"     op: in     value:       - "127.0.0.1"       - "10.0.5.11"'
                            type: array
                            items:
                              description: ApisixRouteHTTPMatchExpr represents a binary route match expression .
                              type: object
                              required:
                                - op
                                - set
                                - subject
                                - value
                              properties:
                                op:
                                  description: Op is the operator.
                                  type: string
                                set:
                                  description: Set is an array type object of the expression. It should be used when the Op is "in" or "not_in";
                                  type: array
                                  items:
                                    type: string
                                subject:
                                  description: Subject is the expression subject, it can be any string composed by literals and nginx vars.
                                  type: object
                                  required:
                                    - name
                                    - scope
                                  properties:
                                    name:
                                      description: The name of subject.
                                      type: string
                                    scope:
                                      description: 'The subject scope, can be: ScopeQuery, ScopeHeader, ScopePath when subject is ScopePath, Name field will be ignored.'
                                      type: string
                                value:
                                  description: Value is the normal type object for the expression, it should be used when the Op is not "in" and "not_in". Set and Value are exclusive so only of them can be set in the same time.
                                  type: string
                          hosts:
                            description: HTTP Host predicates, host can be a wildcard domain or an exact domain. For wildcard domain, only one generic level is allowed, for instance, "*.foo.com" is valid but "*.*.foo.com" is not.
                            type: array
                            items:
                              type: string
                          methods:
                            description: HTTP request method predicates.
                            type: array
                            items:
                              type: string
                          paths:
                            description: URI path predicates, at least one path should be configured, path could be exact or prefix, for prefix path, append "*" after it, for instance, "/foo*".
                            type: array
                            items:
                              type: string
                          remoteAddrs:
                            description: Remote address predicates, items can be valid IPv4 address or IPv6 address or CIDR.
                            type: array
                            items:
                              type: string
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      plugin_config_name:
                        type: string
                      plugins:
                        type: array
                        items:
                          description: ApisixRouteHTTPPlugin represents an APISIX plugin.
                          type: object
                          required:
                            - config
                            - enable
                            - name
                          properties:
                            config:
                              description: Plugin configuration.
                            enable:
                              description: Whether this plugin is in use, default is true.
                              type: boolean
                            name:
                              description: The plugin name.
                              type: string
                      priority:
                        description: Route priority, when multiple routes contains same URI path (for path matching), route with higher priority will take effect.
                        type: integer
                      timeout:
                        description: UpstreamTimeout is settings for the read, send and connect to the upstream.
                        type: object
                        properties:
                          connect:
                            type: string
                          read:
                            type: string
                          send:
                            type: string
                      upstreams:
                        description: Upstreams refer to ApisixUpstream CRD
                        type: array
                        items:
                          description: ApisixRouteUpstreamReference contains a ApisixUpstream CRD reference
                          type: object
                          properties:
                            name:
                              type: string
                            weight:
                              type: integer
                      websocket:
                        type: boolean
                stream:
                  type: array
                  items:
                    description: ApisixRouteStream is the configuration for level 4 route
                    type: object
                    required:
                      - backend
                      - match
                      - name
                      - protocol
                    properties:
                      backend:
                        description: ApisixRouteStreamBackend represents a TCP backend (a Kubernetes Service).
                        type: object
                        required:
                          - serviceName
                          - servicePort
                        properties:
                          resolveGranularity:
                            description: The resolve granularity, can be "endpoints" or "service", when set to "endpoints", the pod ips will be used; other wise, the service ClusterIP or ExternalIP will be used, default is endpoints.
                            type: string
                          serviceName:
                            description: The name (short) of the service, note cross namespace is forbidden, so be sure the ApisixRoute and Service are in the same namespace.
                            type: string
                          servicePort:
                            description: The service port, could be the name or the port number.
                            anyOf:
                              - type: integer
                              - type: string
                            x-kubernetes-int-or-string: true
                          subset:
                            description: Subset specifies a subset for the target Service. The subset should be pre-defined in ApisixUpstream about this service.
                            type: string
                      match:
                        description: ApisixRouteStreamMatch represents the match conditions of stream route.
                        type: object
                        required:
                          - ingressPort
                        properties:
                          ingressPort:
                            description: IngressPort represents the port listening on the Ingress proxy server. It should be pre-defined as APISIX doesn't support dynamic listening.
                            type: integer
                            format: int32
                      name:
                        description: The rule name, cannot be empty.
                        type: string
                      protocol:
                        type: string
            status:
              description: ApisixStatus is the status report for Apisix ingress Resources
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
