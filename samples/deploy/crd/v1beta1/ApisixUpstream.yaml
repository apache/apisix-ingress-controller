#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: apisixupstreams.apisix.apache.org
spec:
  group: apisix.apache.org
  scope: Namespaced
  names:
    plural: apisixupstreams
    singular: apisixupstream
    kind: ApisixUpstream
    shortNames:
      - au
  versions:
    - name: v2beta3
      served: true
      storage: false
      subresources:
        status: {}
      schema:
        openAPIV3Schema:
          description: ApisixUpstream is a decorator for Kubernetes Service, it arms the Service with rich features like health check, retry policies, load balancer and others. It's designed to have same name with the Kubernetes Service and can be customized for individual port.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApisixUpstreamSpec describes the specification of ApisixUpstream.
              type: object
              properties:
                healthCheck:
                  description: The health check configurations for the upstream.
                  type: object
                  required:
                    - active
                  properties:
                    active:
                      description: ActiveHealthCheck defines the active kind of upstream health check.
                      type: object
                      properties:
                        concurrency:
                          type: integer
                        healthy:
                          description: ActiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the active manner.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            interval:
                              type: string
                            successes:
                              type: integer
                        host:
                          type: string
                        httpPath:
                          type: string
                        port:
                          type: integer
                          format: int32
                        requestHeaders:
                          type: array
                          items:
                            type: string
                        strictTLS:
                          type: boolean
                        timeout:
                          description: A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
                          type: integer
                          format: int64
                        type:
                          type: string
                        unhealthy:
                          description: ActiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the active manager.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            httpFailures:
                              type: integer
                            interval:
                              type: string
                            tcpFailures:
                              type: integer
                            timeout:
                              type: integer
                    passive:
                      description: PassiveHealthCheck defines the conditions to judge whether an upstream node is healthy with the passive manager.
                      type: object
                      properties:
                        healthy:
                          description: PassiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the passive manner.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            successes:
                              type: integer
                        type:
                          type: string
                        unhealthy:
                          description: PassiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the passive manager.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            httpFailures:
                              type: integer
                            tcpFailures:
                              type: integer
                            timeout:
                              type: integer
                loadbalancer:
                  description: LoadBalancer represents the load balancer configuration for Kubernetes Service. The default strategy is round robin.
                  type: object
                  required:
                    - type
                  properties:
                    hashOn:
                      description: The HashOn and Key fields are required when Type is "chash". HashOn represents the key fetching scope.
                      type: string
                    key:
                      description: Key represents the hash key.
                      type: string
                    type:
                      type: string
                portLevelSettings:
                  type: array
                  items:
                    description: PortLevelSettings configures the ApisixUpstreamConfig for each individual port. It inherits configurations from the outer level (the whole Kubernetes Service) and overrides some of them if they are set on the port level.
                    type: object
                    required:
                      - port
                    properties:
                      healthCheck:
                        description: The health check configurations for the upstream.
                        type: object
                        required:
                          - active
                        properties:
                          active:
                            description: ActiveHealthCheck defines the active kind of upstream health check.
                            type: object
                            properties:
                              concurrency:
                                type: integer
                              healthy:
                                description: ActiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the active manner.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  interval:
                                    type: string
                                  successes:
                                    type: integer
                              host:
                                type: string
                              httpPath:
                                type: string
                              port:
                                type: integer
                                format: int32
                              requestHeaders:
                                type: array
                                items:
                                  type: string
                              strictTLS:
                                type: boolean
                              timeout:
                                description: A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
                                type: integer
                                format: int64
                              type:
                                type: string
                              unhealthy:
                                description: ActiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the active manager.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  httpFailures:
                                    type: integer
                                  interval:
                                    type: string
                                  tcpFailures:
                                    type: integer
                                  timeout:
                                    type: integer
                          passive:
                            description: PassiveHealthCheck defines the conditions to judge whether an upstream node is healthy with the passive manager.
                            type: object
                            properties:
                              healthy:
                                description: PassiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the passive manner.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  successes:
                                    type: integer
                              type:
                                type: string
                              unhealthy:
                                description: PassiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the passive manager.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  httpFailures:
                                    type: integer
                                  tcpFailures:
                                    type: integer
                                  timeout:
                                    type: integer
                      loadbalancer:
                        description: LoadBalancer represents the load balancer configuration for Kubernetes Service. The default strategy is round robin.
                        type: object
                        required:
                          - type
                        properties:
                          hashOn:
                            description: The HashOn and Key fields are required when Type is "chash". HashOn represents the key fetching scope.
                            type: string
                          key:
                            description: Key represents the hash key.
                            type: string
                          type:
                            type: string
                      port:
                        description: Port is a Kubernetes Service port, it should be already defined.
                        type: integer
                        format: int32
                      retries:
                        description: How many times that the proxy (Apache APISIX) should do when errors occur (error, timeout or bad http status codes like 500, 502).
                        type: integer
                      scheme:
                        description: The scheme used to talk with the upstream. Now value can be http, grpc.
                        type: string
                      subsets:
                        description: Subsets groups the service endpoints by their labels. Usually used to differentiate service versions.
                        type: array
                        items:
                          description: ApisixUpstreamSubset defines a single endpoints group of one Service.
                          type: object
                          required:
                            - labels
                            - name
                          properties:
                            labels:
                              description: Labels is the label set of this subset.
                              type: object
                              additionalProperties:
                                type: string
                            name:
                              description: Name is the name of subset.
                              type: string
                      timeout:
                        description: Timeout settings for the read, send and connect to the upstream.
                        type: object
                        properties:
                          connect:
                            type: string
                          read:
                            type: string
                          send:
                            type: string
                      tlsSecret:
                        description: Set the client certificate when connecting to TLS upstream.
                        type: object
                        required:
                          - name
                          - namespace
                        properties:
                          name:
                            type: string
                            minLength: 1
                          namespace:
                            type: string
                            minLength: 1
                retries:
                  description: How many times that the proxy (Apache APISIX) should do when errors occur (error, timeout or bad http status codes like 500, 502).
                  type: integer
                scheme:
                  description: The scheme used to talk with the upstream. Now value can be http, grpc.
                  type: string
                subsets:
                  description: Subsets groups the service endpoints by their labels. Usually used to differentiate service versions.
                  type: array
                  items:
                    description: ApisixUpstreamSubset defines a single endpoints group of one Service.
                    type: object
                    required:
                      - labels
                      - name
                    properties:
                      labels:
                        description: Labels is the label set of this subset.
                        type: object
                        additionalProperties:
                          type: string
                      name:
                        description: Name is the name of subset.
                        type: string
                timeout:
                  description: Timeout settings for the read, send and connect to the upstream.
                  type: object
                  properties:
                    connect:
                      type: string
                    read:
                      type: string
                    send:
                      type: string
                tlsSecret:
                  description: Set the client certificate when connecting to TLS upstream.
                  type: object
                  required:
                    - name
                    - namespace
                  properties:
                    name:
                      type: string
                      minLength: 1
                    namespace:
                      type: string
                      minLength: 1
            status:
              description: ApisixStatus is the status report for Apisix ingress Resources
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
    - name: v2
      served: true
      storage: true
      subresources:
        status: {}
      schema:
        openAPIV3Schema:
          description: ApisixUpstream is a decorator for Kubernetes Service, it arms the Service with rich features like health check, retry policies, load balancer and others. It's designed to have same name with the Kubernetes Service and can be customized for individual port.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ApisixUpstreamSpec describes the specification of ApisixUpstream.
              type: object
              properties:
                externalNodes:
                  description: ExternalNodes contains external nodes the Upstream should use If this field is set, the upstream will use these nodes directly without any further resolves
                  type: array
                  items:
                    description: ApisixUpstreamExternalNode is the external node conf
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      weight:
                        type: integer
                healthCheck:
                  description: The health check configurations for the upstream.
                  type: object
                  required:
                    - active
                  properties:
                    active:
                      description: ActiveHealthCheck defines the active kind of upstream health check.
                      type: object
                      properties:
                        concurrency:
                          type: integer
                        healthy:
                          description: ActiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the active manner.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            interval:
                              type: string
                            successes:
                              type: integer
                        host:
                          type: string
                        httpPath:
                          type: string
                        port:
                          type: integer
                          format: int32
                        requestHeaders:
                          type: array
                          items:
                            type: string
                        strictTLS:
                          type: boolean
                        timeout:
                          description: A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
                          type: integer
                          format: int64
                        type:
                          type: string
                        unhealthy:
                          description: ActiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the active manager.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            httpFailures:
                              type: integer
                            interval:
                              type: string
                            tcpFailures:
                              type: integer
                            timeout:
                              type: integer
                    passive:
                      description: PassiveHealthCheck defines the conditions to judge whether an upstream node is healthy with the passive manager.
                      type: object
                      properties:
                        healthy:
                          description: PassiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the passive manner.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            successes:
                              type: integer
                        type:
                          type: string
                        unhealthy:
                          description: PassiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the passive manager.
                          type: object
                          properties:
                            httpCodes:
                              type: array
                              items:
                                type: integer
                            httpFailures:
                              type: integer
                            tcpFailures:
                              type: integer
                            timeout:
                              type: integer
                loadbalancer:
                  description: LoadBalancer represents the load balancer configuration for Kubernetes Service. The default strategy is round robin.
                  type: object
                  required:
                    - type
                  properties:
                    hashOn:
                      description: The HashOn and Key fields are required when Type is "chash". HashOn represents the key fetching scope.
                      type: string
                    key:
                      description: Key represents the hash key.
                      type: string
                    type:
                      type: string
                portLevelSettings:
                  type: array
                  items:
                    description: PortLevelSettings configures the ApisixUpstreamConfig for each individual port. It inherits configurations from the outer level (the whole Kubernetes Service) and overrides some of them if they are set on the port level.
                    type: object
                    required:
                      - port
                    properties:
                      healthCheck:
                        description: The health check configurations for the upstream.
                        type: object
                        required:
                          - active
                        properties:
                          active:
                            description: ActiveHealthCheck defines the active kind of upstream health check.
                            type: object
                            properties:
                              concurrency:
                                type: integer
                              healthy:
                                description: ActiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the active manner.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  interval:
                                    type: string
                                  successes:
                                    type: integer
                              host:
                                type: string
                              httpPath:
                                type: string
                              port:
                                type: integer
                                format: int32
                              requestHeaders:
                                type: array
                                items:
                                  type: string
                              strictTLS:
                                type: boolean
                              timeout:
                                description: A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
                                type: integer
                                format: int64
                              type:
                                type: string
                              unhealthy:
                                description: ActiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the active manager.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  httpFailures:
                                    type: integer
                                  interval:
                                    type: string
                                  tcpFailures:
                                    type: integer
                                  timeout:
                                    type: integer
                          passive:
                            description: PassiveHealthCheck defines the conditions to judge whether an upstream node is healthy with the passive manager.
                            type: object
                            properties:
                              healthy:
                                description: PassiveHealthCheckHealthy defines the conditions to judge whether an upstream node is healthy with the passive manner.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  successes:
                                    type: integer
                              type:
                                type: string
                              unhealthy:
                                description: PassiveHealthCheckUnhealthy defines the conditions to judge whether an upstream node is unhealthy with the passive manager.
                                type: object
                                properties:
                                  httpCodes:
                                    type: array
                                    items:
                                      type: integer
                                  httpFailures:
                                    type: integer
                                  tcpFailures:
                                    type: integer
                                  timeout:
                                    type: integer
                      loadbalancer:
                        description: LoadBalancer represents the load balancer configuration for Kubernetes Service. The default strategy is round robin.
                        type: object
                        required:
                          - type
                        properties:
                          hashOn:
                            description: The HashOn and Key fields are required when Type is "chash". HashOn represents the key fetching scope.
                            type: string
                          key:
                            description: Key represents the hash key.
                            type: string
                          type:
                            type: string
                      port:
                        description: Port is a Kubernetes Service port, it should be already defined.
                        type: integer
                        format: int32
                      retries:
                        description: How many times that the proxy (Apache APISIX) should do when errors occur (error, timeout or bad http status codes like 500, 502).
                        type: integer
                      scheme:
                        description: The scheme used to talk with the upstream. Now value can be http, grpc.
                        type: string
                      subsets:
                        description: Subsets groups the service endpoints by their labels. Usually used to differentiate service versions.
                        type: array
                        items:
                          description: ApisixUpstreamSubset defines a single endpoints group of one Service.
                          type: object
                          required:
                            - labels
                            - name
                          properties:
                            labels:
                              description: Labels is the label set of this subset.
                              type: object
                              additionalProperties:
                                type: string
                            name:
                              description: Name is the name of subset.
                              type: string
                      timeout:
                        description: Timeout settings for the read, send and connect to the upstream.
                        type: object
                        properties:
                          connect:
                            type: string
                          read:
                            type: string
                          send:
                            type: string
                      tlsSecret:
                        description: Set the client certificate when connecting to TLS upstream.
                        type: object
                        required:
                          - name
                          - namespace
                        properties:
                          name:
                            type: string
                            minLength: 1
                          namespace:
                            type: string
                            minLength: 1
                retries:
                  description: How many times that the proxy (Apache APISIX) should do when errors occur (error, timeout or bad http status codes like 500, 502).
                  type: integer
                scheme:
                  description: The scheme used to talk with the upstream. Now value can be http, grpc.
                  type: string
                subsets:
                  description: Subsets groups the service endpoints by their labels. Usually used to differentiate service versions.
                  type: array
                  items:
                    description: ApisixUpstreamSubset defines a single endpoints group of one Service.
                    type: object
                    required:
                      - labels
                      - name
                    properties:
                      labels:
                        description: Labels is the label set of this subset.
                        type: object
                        additionalProperties:
                          type: string
                      name:
                        description: Name is the name of subset.
                        type: string
                timeout:
                  description: Timeout settings for the read, send and connect to the upstream.
                  type: object
                  properties:
                    connect:
                      type: string
                    read:
                      type: string
                    send:
                      type: string
                tlsSecret:
                  description: Set the client certificate when connecting to TLS upstream.
                  type: object
                  required:
                    - name
                    - namespace
                  properties:
                    name:
                      type: string
                      minLength: 1
                    namespace:
                      type: string
                      minLength: 1
            status:
              description: ApisixStatus is the status report for Apisix ingress Resources
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
