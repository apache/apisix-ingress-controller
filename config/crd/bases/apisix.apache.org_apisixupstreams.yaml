---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.2
  name: apisixupstreams.apisix.apache.org
spec:
  group: apisix.apache.org
  names:
    kind: ApisixUpstream
    listKind: ApisixUpstreamList
    plural: apisixupstreams
    shortNames:
    - au
    singular: apisixupstream
  scope: Namespaced
  versions:
  - name: v2
    schema:
      openAPIV3Schema:
        description: ApisixUpstream defines configuration for upstream services.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ApisixUpstreamSpec defines the upstream configuration.
            properties:
              discovery:
                description: |-
                  Discovery configures service discovery for the upstream.
                  Deprecated: no longer supported in standalone mode.
                properties:
                  args:
                    additionalProperties:
                      type: string
                    description: |-
                      Args contains additional configuration parameters required by the discovery provider.
                      These are passed as key-value pairs.
                    type: object
                  serviceName:
                    description: ServiceName is the name of the service to discover.
                    type: string
                  type:
                    description: Type is the name of the service discovery provider.
                    type: string
                required:
                - serviceName
                - type
                type: object
              externalNodes:
                description: |-
                  ExternalNodes defines a static list of backend nodes located outside the cluster.
                  When this field is set, the upstream will route traffic directly to these nodes
                  without DNS resolution or service discovery.
                items:
                  description: |-
                    ApisixUpstreamExternalNode defines configuration for an external upstream node.
                    This allows referencing services outside the cluster.
                  properties:
                    name:
                      description: Name is the hostname or IP address of the external
                        node.
                      type: string
                    port:
                      description: Port specifies the port number on which the external
                        node is accepting traffic.
                      type: integer
                    type:
                      description: Type indicates the kind of external node. Can be
                        `Domain`, or `Service`.
                      type: string
                    weight:
                      description: |-
                        Weight defines the load balancing weight of this node.
                        Higher values increase the share of traffic sent to this node.
                      type: integer
                  type: object
                minItems: 1
                type: array
              healthCheck:
                description: |-
                  HealthCheck defines the active and passive health check configuration for the upstream.
                  Deprecated: no longer supported in standalone mode.
                properties:
                  active:
                    description: Active health checks proactively send requests to
                      upstream nodes to determine their availability.
                    properties:
                      concurrency:
                        description: Concurrency sets the number of targets to be
                          checked at the same time.
                        minimum: 0
                        type: integer
                      healthy:
                        description: Healthy configures the rules that define an upstream
                          node as healthy.
                        properties:
                          httpCodes:
                            description: HTTPCodes define a list of HTTP status codes
                              that are considered healthy.
                            items:
                              type: integer
                            minItems: 1
                            type: array
                          interval:
                            description: Interval defines the time interval for checking
                              targets, in seconds.
                            type: string
                          successes:
                            description: Successes define the number of successful
                              probes to define a healthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                        type: object
                      host:
                        description: Host sets the upstream host.
                        type: string
                      httpPath:
                        description: HTTPPath sets the HTTP probe request path.
                        type: string
                      port:
                        description: Port sets the upstream port.
                        format: int32
                        maximum: 65535
                        minimum: 0
                        type: integer
                      requestHeaders:
                        description: RequestHeaders sets the request headers.
                        items:
                          type: string
                        type: array
                      strictTLS:
                        description: StrictTLS sets whether to enforce TLS.
                        type: boolean
                      timeout:
                        description: Timeout sets health check timeout in seconds.
                        format: int64
                        type: integer
                      type:
                        description: Type is the health check type. Can be `http`,
                          `https`, or `tcp`.
                        enum:
                        - http
                        - https
                        - tcp
                        type: string
                      unhealthy:
                        description: Unhealthy configures the rules that define an
                          upstream node as unhealthy.
                        properties:
                          httpCodes:
                            description: HTTPCodes define a list of HTTP status codes
                              that are considered unhealthy.
                            items:
                              type: integer
                            minItems: 1
                            type: array
                          httpFailures:
                            description: HTTPFailures define the number of HTTP failures
                              to define an unhealthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                          interval:
                            description: Interval defines the time interval for checking
                              targets, in seconds.
                            type: string
                          tcpFailures:
                            description: TCPFailures define the number of TCP failures
                              to define an unhealthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                          timeout:
                            description: Timeout sets health check timeout in seconds.
                            type: integer
                        type: object
                    type: object
                  passive:
                    description: Passive health checks evaluate upstream health based
                      on observed traffic, such as timeouts or errors.
                    properties:
                      healthy:
                        description: Healthy defines the conditions under which an
                          upstream node is considered healthy.
                        properties:
                          httpCodes:
                            description: HTTPCodes define a list of HTTP status codes
                              that are considered healthy.
                            items:
                              type: integer
                            minItems: 1
                            type: array
                          successes:
                            description: Successes define the number of successful
                              probes to define a healthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                        type: object
                      type:
                        description: |-
                          Type specifies the type of passive health check.
                          Can be `http`, `https`, or `tcp`.
                        type: string
                      unhealthy:
                        description: Unhealthy defines the conditions under which
                          an upstream node is considered unhealthy.
                        properties:
                          httpCodes:
                            description: HTTPCodes define a list of HTTP status codes
                              that are considered unhealthy.
                            items:
                              type: integer
                            minItems: 1
                            type: array
                          httpFailures:
                            description: HTTPFailures define the number of HTTP failures
                              to define an unhealthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                          tcpFailures:
                            description: TCPFailures define the number of TCP failures
                              to define an unhealthy target.
                            maximum: 254
                            minimum: 0
                            type: integer
                          timeout:
                            description: Timeout sets health check timeout in seconds.
                            type: integer
                        type: object
                    type: object
                required:
                - active
                type: object
              ingressClassName:
                description: |-
                  IngressClassName is the name of an IngressClass cluster resource.
                  Controller implementations use this field to determine whether they
                  should process this ApisixUpstream resource.
                type: string
              loadbalancer:
                description: LoadBalancer specifies the load balancer configuration
                  for Kubernetes Service.
                properties:
                  hashOn:
                    default: vars
                    description: |-
                      HashOn specified the type of field used for hashing, required when type is `chash`.
                      Default is `vars`. Can be `vars`, `header`, `cookie`, `consumer`, or `vars_combinations`.
                    enum:
                    - vars
                    - header
                    - cookie
                    - consumer
                    - vars_combinations
                    type: string
                  key:
                    description: |-
                      Key is used with HashOn, generally required when type is `chash`.
                      When HashOn is `header` or `cookie`, specifies the name of the header or cookie.
                      When HashOn is `consumer`, key is not required, as the consumer name is used automatically.
                      When HashOn is `vars` or `vars_combinations`, key refers to one or a combination of
                      [APISIX variables](https://apisix.apache.org/docs/apisix/apisix-variable).
                    type: string
                  type:
                    default: roundrobin
                    description: |-
                      Type specifies the load balancing algorithms to route traffic to the backend.
                      Default is `roundrobin`.
                      Can be `roundrobin`, `chash`, `ewma`, or `least_conn`.
                    enum:
                    - roundrobin
                    - chash
                    - ewma
                    - least_conn
                    type: string
                required:
                - type
                type: object
              passHost:
                description: |-
                  PassHost configures how the host header should be determined when a
                  request is forwarded to the upstream.
                  Default is `pass`.
                  Can be `pass`, `node` or `rewrite`:
                  * `pass`: preserve the original Host header
                  * `node`: use the upstream node’s host
                  * `rewrite`: set to a custom host via upstreamHost
                enum:
                - pass
                - node
                - rewrite
                type: string
              portLevelSettings:
                description: |-
                  PortLevelSettings allows fine-grained upstream configuration for specific ports,
                  useful when a backend service exposes multiple ports with different behaviors or protocols.
                items:
                  description: |-
                    PortLevelSettings configures the ApisixUpstreamConfig for each individual port. It inherits
                    configuration from the outer level (the whole Kubernetes Service) and overrides some of
                    them if they are set on the port level.
                  properties:
                    discovery:
                      description: |-
                        Discovery configures service discovery for the upstream.
                        Deprecated: no longer supported in standalone mode.
                      properties:
                        args:
                          additionalProperties:
                            type: string
                          description: |-
                            Args contains additional configuration parameters required by the discovery provider.
                            These are passed as key-value pairs.
                          type: object
                        serviceName:
                          description: ServiceName is the name of the service to discover.
                          type: string
                        type:
                          description: Type is the name of the service discovery provider.
                          type: string
                      required:
                      - serviceName
                      - type
                      type: object
                    healthCheck:
                      description: |-
                        HealthCheck defines the active and passive health check configuration for the upstream.
                        Deprecated: no longer supported in standalone mode.
                      properties:
                        active:
                          description: Active health checks proactively send requests
                            to upstream nodes to determine their availability.
                          properties:
                            concurrency:
                              description: Concurrency sets the number of targets
                                to be checked at the same time.
                              minimum: 0
                              type: integer
                            healthy:
                              description: Healthy configures the rules that define
                                an upstream node as healthy.
                              properties:
                                httpCodes:
                                  description: HTTPCodes define a list of HTTP status
                                    codes that are considered healthy.
                                  items:
                                    type: integer
                                  minItems: 1
                                  type: array
                                interval:
                                  description: Interval defines the time interval
                                    for checking targets, in seconds.
                                  type: string
                                successes:
                                  description: Successes define the number of successful
                                    probes to define a healthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                              type: object
                            host:
                              description: Host sets the upstream host.
                              type: string
                            httpPath:
                              description: HTTPPath sets the HTTP probe request path.
                              type: string
                            port:
                              description: Port sets the upstream port.
                              format: int32
                              maximum: 65535
                              minimum: 0
                              type: integer
                            requestHeaders:
                              description: RequestHeaders sets the request headers.
                              items:
                                type: string
                              type: array
                            strictTLS:
                              description: StrictTLS sets whether to enforce TLS.
                              type: boolean
                            timeout:
                              description: Timeout sets health check timeout in seconds.
                              format: int64
                              type: integer
                            type:
                              description: Type is the health check type. Can be `http`,
                                `https`, or `tcp`.
                              enum:
                              - http
                              - https
                              - tcp
                              type: string
                            unhealthy:
                              description: Unhealthy configures the rules that define
                                an upstream node as unhealthy.
                              properties:
                                httpCodes:
                                  description: HTTPCodes define a list of HTTP status
                                    codes that are considered unhealthy.
                                  items:
                                    type: integer
                                  minItems: 1
                                  type: array
                                httpFailures:
                                  description: HTTPFailures define the number of HTTP
                                    failures to define an unhealthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                                interval:
                                  description: Interval defines the time interval
                                    for checking targets, in seconds.
                                  type: string
                                tcpFailures:
                                  description: TCPFailures define the number of TCP
                                    failures to define an unhealthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                                timeout:
                                  description: Timeout sets health check timeout in
                                    seconds.
                                  type: integer
                              type: object
                          type: object
                        passive:
                          description: Passive health checks evaluate upstream health
                            based on observed traffic, such as timeouts or errors.
                          properties:
                            healthy:
                              description: Healthy defines the conditions under which
                                an upstream node is considered healthy.
                              properties:
                                httpCodes:
                                  description: HTTPCodes define a list of HTTP status
                                    codes that are considered healthy.
                                  items:
                                    type: integer
                                  minItems: 1
                                  type: array
                                successes:
                                  description: Successes define the number of successful
                                    probes to define a healthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                              type: object
                            type:
                              description: |-
                                Type specifies the type of passive health check.
                                Can be `http`, `https`, or `tcp`.
                              type: string
                            unhealthy:
                              description: Unhealthy defines the conditions under
                                which an upstream node is considered unhealthy.
                              properties:
                                httpCodes:
                                  description: HTTPCodes define a list of HTTP status
                                    codes that are considered unhealthy.
                                  items:
                                    type: integer
                                  minItems: 1
                                  type: array
                                httpFailures:
                                  description: HTTPFailures define the number of HTTP
                                    failures to define an unhealthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                                tcpFailures:
                                  description: TCPFailures define the number of TCP
                                    failures to define an unhealthy target.
                                  maximum: 254
                                  minimum: 0
                                  type: integer
                                timeout:
                                  description: Timeout sets health check timeout in
                                    seconds.
                                  type: integer
                              type: object
                          type: object
                      required:
                      - active
                      type: object
                    loadbalancer:
                      description: LoadBalancer specifies the load balancer configuration
                        for Kubernetes Service.
                      properties:
                        hashOn:
                          default: vars
                          description: |-
                            HashOn specified the type of field used for hashing, required when type is `chash`.
                            Default is `vars`. Can be `vars`, `header`, `cookie`, `consumer`, or `vars_combinations`.
                          enum:
                          - vars
                          - header
                          - cookie
                          - consumer
                          - vars_combinations
                          type: string
                        key:
                          description: |-
                            Key is used with HashOn, generally required when type is `chash`.
                            When HashOn is `header` or `cookie`, specifies the name of the header or cookie.
                            When HashOn is `consumer`, key is not required, as the consumer name is used automatically.
                            When HashOn is `vars` or `vars_combinations`, key refers to one or a combination of
                            [APISIX variables](https://apisix.apache.org/docs/apisix/apisix-variable).
                          type: string
                        type:
                          default: roundrobin
                          description: |-
                            Type specifies the load balancing algorithms to route traffic to the backend.
                            Default is `roundrobin`.
                            Can be `roundrobin`, `chash`, `ewma`, or `least_conn`.
                          enum:
                          - roundrobin
                          - chash
                          - ewma
                          - least_conn
                          type: string
                      required:
                      - type
                      type: object
                    passHost:
                      description: |-
                        PassHost configures how the host header should be determined when a
                        request is forwarded to the upstream.
                        Default is `pass`.
                        Can be `pass`, `node` or `rewrite`:
                        * `pass`: preserve the original Host header
                        * `node`: use the upstream node’s host
                        * `rewrite`: set to a custom host via upstreamHost
                      enum:
                      - pass
                      - node
                      - rewrite
                      type: string
                    port:
                      description: Port is a Kubernetes Service port.
                      format: int32
                      type: integer
                    retries:
                      description: |-
                        Retries defines the number of retry attempts APISIX should make when a failure occurs.
                        Failures include timeouts, network errors, or 5xx status codes.
                      format: int64
                      type: integer
                    scheme:
                      description: |-
                        Scheme is the protocol used to communicate with the upstream.
                        Default is `http`.
                        Can be `http`, `https`, `grpc`, or `grpcs`.
                      enum:
                      - http
                      - https
                      - grpc
                      - grpcs
                      type: string
                    subsets:
                      description: |-
                        Subsets defines labeled subsets of service endpoints, typically used for
                        service versioning or canary deployments.
                      items:
                        description: ApisixUpstreamSubset defines a single endpoints
                          group of one Service.
                        properties:
                          labels:
                            additionalProperties:
                              type: string
                            description: Labels is the label set of this subset.
                            type: object
                          name:
                            description: Name is the name of subset.
                            type: string
                        required:
                        - labels
                        - name
                        type: object
                      type: array
                    timeout:
                      description: Timeout specifies the connection, send, and read
                        timeouts for upstream requests.
                      properties:
                        connect:
                          description: Connect timeout for establishing a connection
                            to the upstream.
                          type: string
                        read:
                          description: Read timeout for reading data from the upstream.
                          type: string
                        send:
                          description: Send timeout for sending data to the upstream.
                          type: string
                      type: object
                    tlsSecret:
                      description: |-
                        TLSSecret references a Kubernetes Secret that contains the client certificate and key
                        for mutual TLS when connecting to the upstream.
                      properties:
                        name:
                          description: Name is the name of the Kubernetes Secret.
                          minLength: 1
                          type: string
                        namespace:
                          description: Namespace is the namespace where the Kubernetes
                            Secret is located.
                          minLength: 1
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    upstreamHost:
                      description: UpstreamHost sets a custom Host header when passHost
                        is set to `rewrite`.
                      type: string
                  required:
                  - port
                  type: object
                type: array
              retries:
                description: |-
                  Retries defines the number of retry attempts APISIX should make when a failure occurs.
                  Failures include timeouts, network errors, or 5xx status codes.
                format: int64
                type: integer
              scheme:
                description: |-
                  Scheme is the protocol used to communicate with the upstream.
                  Default is `http`.
                  Can be `http`, `https`, `grpc`, or `grpcs`.
                enum:
                - http
                - https
                - grpc
                - grpcs
                type: string
              subsets:
                description: |-
                  Subsets defines labeled subsets of service endpoints, typically used for
                  service versioning or canary deployments.
                items:
                  description: ApisixUpstreamSubset defines a single endpoints group
                    of one Service.
                  properties:
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels is the label set of this subset.
                      type: object
                    name:
                      description: Name is the name of subset.
                      type: string
                  required:
                  - labels
                  - name
                  type: object
                type: array
              timeout:
                description: Timeout specifies the connection, send, and read timeouts
                  for upstream requests.
                properties:
                  connect:
                    description: Connect timeout for establishing a connection to
                      the upstream.
                    type: string
                  read:
                    description: Read timeout for reading data from the upstream.
                    type: string
                  send:
                    description: Send timeout for sending data to the upstream.
                    type: string
                type: object
              tlsSecret:
                description: |-
                  TLSSecret references a Kubernetes Secret that contains the client certificate and key
                  for mutual TLS when connecting to the upstream.
                properties:
                  name:
                    description: Name is the name of the Kubernetes Secret.
                    minLength: 1
                    type: string
                  namespace:
                    description: Namespace is the namespace where the Kubernetes Secret
                      is located.
                    minLength: 1
                    type: string
                required:
                - name
                - namespace
                type: object
              upstreamHost:
                description: UpstreamHost sets a custom Host header when passHost
                  is set to `rewrite`.
                type: string
            type: object
          status:
            description: ApisixStatus is the status report for Apisix ingress Resources
            properties:
              conditions:
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
